name: Build, Deploy to ECR, and Deploy to EKS
on:
  pull_request:
    branches: [ main ]
    

jobs:
  build-and-deploy:
    name: Build Images, Deploy to ECR and EKS
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Login to Amazon for ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Create ECR Repositories
      run: |
        aws ecr describe-repositories --repository-names mysql || aws ecr create-repository --repository-name mysql
        aws ecr describe-repositories --repository-names app || aws ecr create-repository --repository-name app
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, tag, and push mysql image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mysql
        IMAGE_TAG: v0.1
      run: |
        cd dockerfiles/mysql/
        ls -ltra
        # Docker build
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Build, tag, and push webapp image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: app
        IMAGE_TAG: v0.1
      run: |
        cd dockerfiles/webapp/
        ls -ltra
        # Docker build
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Get AWS Account ID
      id: get-aws-account-id
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV

    - name: Change account ID in cluster config and service account manifests
      run: |
        # Replace AWS account ID in cluster config and service account manifests
        sed -i "s/\${AWS_ACCOUNT_ID}/${{ env.AWS_ACCOUNT_ID }}/g" k8s-config/*.yaml

    - name: Setup SSH and Deploy to EC2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        MYSQL_IMAGE: mysql:v0.1
        WEBAPP_IMAGE: app:v0.1
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

        # Create deployment script
        cat > deploy.sh << 'DEPLOY_SCRIPT'
        #!/bin/bash
        set -e

        # Configure AWS credentials
        mkdir -p ~/.aws
        cat > ~/.aws/credentials << 'CREDENTIALS'
        [default]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_session_token = ${{ secrets.AWS_SESSION_TOKEN }}
        CREDENTIALS

        cat > ~/.aws/config << 'CONFIG'
        [default]
        region = us-east-1
        output = json
        CONFIG

        # Login to ECR
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

        # Pull and verify images
        echo "Pulling MySQL image..."
        docker pull $ECR_REGISTRY/$MYSQL_IMAGE
        echo "Pulling Webapp image..."
        docker pull $ECR_REGISTRY/$WEBAPP_IMAGE

        # Verify images
        echo "Verifying pulled images..."
        docker images | grep -E "$ECR_REGISTRY/mysql|$ECR_REGISTRY/app"
        DEPLOY_SCRIPT

        # Make script executable and copy to EC2
        chmod +x deploy.sh
        scp -i ~/.ssh/id_rsa deploy.sh ec2-user@${{ secrets.EC2_HOST }}:~/deploy.sh

        # Execute deployment script on EC2
        ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} 'bash ~/deploy.sh'
        
      
